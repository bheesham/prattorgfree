// Generated by CoffeeScript 1.6.2
(function() {
  var Messages, Sequelize, director, http, retrieve_slander, router, server, sql, submit_slander, url;

  http = require("http");

  url = require("url");

  director = require("director");

  Sequelize = require("sequelize");

  sql = new Sequelize("prattorgfree", "postgres", "12345", {
    host: "localhost",
    port: 5432,
    dialect: "postgres",
    define: {
      underscored: true
    },
    logging: false
  });

  Messages = sql.define("messages", {
    message: {
      allowNull: false,
      type: Sequelize.TEXT,
      validate: {
        notEmpty: true
      }
    },
    image: {
      defaultValue: "",
      allowNull: false,
      type: Sequelize.TEXT,
      validate: {
        isUrl: true
      }
    },
    approved: {
      allowNull: false,
      type: Sequelize.BOOLEAN,
      defaultValue: false
    }
  }, {
    paranoid: false,
    underscored: true
  });

  submit_slander = function() {
    var res;

    res = this.res;
    res.writeHead(200, {
      "Content-Type": "application/json",
      "charset": "utf8"
    });
    if (!this.req.body.message || (this.req.body.message == null)) {
      return this.res.end(JSON.stringify({
        error: "invalid request, no slander message."
      }));
    }
    if (this.req.body.image && (this.req.body.image != null) && !this.req.body.image.match("/(http|https):\/\/i\.imgur\.com\/([a-z0-9]+)\.(jpg|jpeg|png|gif)/i")) {
      return this.res.end(JSON.stringify({
        error: "invalid request, invalid imgur url."
      }));
    } else {
      this.req.body.image = "";
    }
    return Messages.create({
      message: this.req.body.message,
      image: this.req.body.image
    }).success(function() {
      return res.end(JSON.stringify({
        success: "you've made simon sad. congratulations."
      }));
    }).error(function(e) {
      return res.end(JSON.stringify({
        error: "welp. there was a database error. you should try to submit your message again in a few minutes."
      }));
    });
  };

  retrieve_slander = function() {
    var res;

    res = this.res;
    this.res.writeHead(200, {
      "Content-Type": "text/plain",
      "charset": "utf8"
    });
    return sql.query("SELECT message, image FROM messages WHERE approved = true ORDER BY RANDOM() LIMIT 1").success(function(result) {
      if (result.length > 0) {
        return res.end(JSON.stringify({
          message: result[0].message,
          image: result[0].image
        }));
      } else {
        return res.end(JSON.stringify({
          error: "no more content."
        }));
      }
    }).error(function(e) {
      return res.end(JSON.stringify({
        error: "no more content."
      }));
    });
  };

  router = new director.http.Router({
    '/submit': {
      post: submit_slander
    }
  });

  router.get(/\/retrieve/, retrieve_slander);

  server = http.createServer(function(req, res) {
    req.chunks = [];
    req.on("data", function(chunk) {
      return req.chunks.push(chunk.toString());
    });
    return router.dispatch(req, res, function(err) {
      if (err) {
        res.writeHead(404);
        return res.end();
      }
    });
  });

  Messages.sync().success(function() {
    return server.listen(5666);
  }).failure(function(e) {
    return console.log(e);
  });

}).call(this);
